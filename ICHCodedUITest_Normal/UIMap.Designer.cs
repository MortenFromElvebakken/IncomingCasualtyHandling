// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace ICHCodedUITest_Normal
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// RecordedMethod1
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WpfWindow uIWpfWindow = this.UIWpfWindow;
            #endregion

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(291, 690));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(278, 122));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(134, 124));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(402, 166));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(44, 81));
        }
        
        /// <summary>
        /// RecordedMethod2
        /// </summary>
        public void RecordedMethod2()
        {
            #region Variable Declarations
            WpfWindow uIWpfWindow = this.UIWpfWindow;
            #endregion

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(291, 690));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(278, 122));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(134, 124));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(402, 166));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(44, 81));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(296, 672));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(291, 120));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(1218, 71));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(26, 78));
        }
        
        #region Properties
        public UIWpfWindow UIWpfWindow
        {
            get
            {
                if ((this.mUIWpfWindow == null))
                {
                    this.mUIWpfWindow = new UIWpfWindow();
                }
                return this.mUIWpfWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIWpfWindow mUIWpfWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIWpfWindow : WpfWindow
    {
        
        public UIWpfWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            #endregion
        }
    }
}
